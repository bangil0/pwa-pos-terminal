import { Tax, AppState, Order, OrderItem, OrderStatuses, Item } from 'common/types';
import { getTimestamp, generateId } from 'common/utils';

export const createNewOrder = (state: AppState): Order => ({
  cardPaymentAmount: 0,
  cashPaymentAmount: 0,
  certPaymentAmount: 0,
  customerId: 0,
  customerLoyaltyType: 0,
  dateClose: 0,
  datePrint: 0,
  dateStart: getTimestamp(),
  dateUpdated: 0,
  discountAmount: 0,
  id: generateId(),
  isDiscounted: false,
  isTipIncluded: false,
  items: [],
  notes: '',
  orderName: Math.max(...state.orders.map((order) => order.orderName), 0) + 1,
  parentId: null,
  paymentMethodId: 0,
  rewardEarnedAmount: 0,
  rewardPaymentAmount: 0,
  status: OrderStatuses.Open,
  subTotalAmount: 0,
  subTotalRoundedAmount: 0,
  tableId: state.currentTableId,
  appliedTaxes: [],
  taxAmount: 0,
  taxRoundedAmount: 0,
  tipsAmount: 0,
  tipsCard: 0,
  tipsCash: 0,
  totalAmount: 0,
  totalPaymentAmount: 0,
  totalRoundedAmount: 0,
  userId: state.currentUserId,
});

export const createNewTaxItem = (): Tax => ({
  id: generateId(),
  name: '',
  applyToCustomAmounts: false,
  isDeleted: false,
  isEnabled: false,
  isIncludedInPrice: false,
  precentage: 5,
});

export const createNewOrderItem = (item: Item): OrderItem => ({
  taxAmount: 0,
  includedTaxAmount: 0,
  totalTaxAmount: 0,
  id: item.id,
  price: item.price,
  quantity: 1,
  variant: 0,
  amount: item.price,
  taxes: [],
});
